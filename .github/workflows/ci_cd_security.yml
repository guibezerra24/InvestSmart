
name: CI/CD Security (SAST + SCA + DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest

  sca:
    name: SCA (pip-audit + licenças)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install deps for audit
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit pip-licenses
      - name: CVE scan (pip-audit)
        run: |
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          pip-audit -r requirements.txt -f json -o pip-audit.json || true
      - name: Licenses report
        run: |
          pip-licenses --format=csv --with-authors --with-urls > licenses.csv
      - name: Upload SCA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: |
            pip-audit.sarif
            pip-audit.json
            licenses.csv
      - name: Upload SARIF (CVE)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Install Semgrep
        run: pipx install semgrep
      - name: Run Semgrep
        run: |
          semgrep ci                 --config p/ci                 --config r/python                 --config r/secrets                 --config r/owasp-top-ten                 --sarif --output semgrep-results.sarif                 --json --output-json semgrep-results.json                 --error --severity=HIGH --severity=CRITICAL
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-semgrep
          path: |
            semgrep-results.sarif
            semgrep-results.json

  dast:
    name: DAST (ZAP baseline + Nikto)
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install & start app (staging)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          for i in {1..20}; do curl -fsS http://127.0.0.1:8000/health && break || sleep 1; done
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://127.0.0.1:8000'
          rules_file_name: ''
          cmd_options: '-a'   # agressivo: inclui passive+alguns ativos leves
        continue-on-error: true
      - name: Collect ZAP report
        run: |
          mv report.html zap-baseline-report.html || true
      - name: Nikto Scan
        run: |
          docker run --rm --network host sullo/nikto -host http://127.0.0.1:8000 > nikto.txt || true
      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            zap-baseline-report.html
            nikto.txt

  # Simulação de deploy bloqueado por falhas críticas (gates = jobs falhando)
  deploy_simulado:
    name: Deploy (simulado) para staging
    runs-on: ubuntu-latest
    needs: [sca, sast, dast]
    if: ${{ success() }}   # se qualquer job falhar, não roda
    steps:
      - run: echo "Deploy liberado (todos os gates passaram)."

