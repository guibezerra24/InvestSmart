
name: SAST

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest

  semgrep:
    name: Semgrep (Python/OWASP/Secrets)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Install Semgrep
        run: pipx install semgrep
      - name: Run Semgrep
        run: |
          semgrep ci                 --config p/ci                 --config r/python                 --config r/secrets                 --config r/owasp-top-ten                 --sarif --output semgrep-results.sarif                 --json --output-json semgrep-results.json                 --error --severity=HIGH --severity=CRITICAL
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: |
            semgrep-results.sarif
            semgrep-results.json

  sonar:
    name: Sonar (Quality Gate)
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Sonar Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-5.0.1.3006-linux.zip
          unzip -q sonar-scanner.zip
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
          sonar-scanner                 -Dsonar.login="${SONAR_TOKEN}"                 -Dsonar.host.url="${SONAR_HOST_URL}"                 -Dsonar.projectKey="${SONAR_PROJECT_KEY}"
      - name: Quality Gate (fail if not OK)
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          sleep 15
          curl -s -u "${SONAR_TOKEN}:"                 "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"                 | tee sonar-qg.json
          jq -e 'select(.projectStatus.status == "OK")' sonar-qg.json >/dev/null || (echo "Quality Gate FAILED" && exit 1)
      - uses: actions/upload-artifact@v4
        with:
          name: sonar-quality-gate
          path: sonar-qg.json
